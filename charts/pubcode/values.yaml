# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  repository: ~ # the repository where the images are stored.
  registry: ghcr.io # the registry where the images are stored. override during runtime for other registry at global level or individual level.
  env:
    LOG_LEVEL: "info"
    VITE_SCHEMA_BRANCH: "main"
  secrets:
    enabled: true
    databaseHost: '{{ .Release.Name }}-database'
    databaseAdminPassword: default
    databaseAdminUser: admin
    databaseName: pubcode
    apiKey: default
    emailRecipients: default
    chesTokenURL: default
    chesClientID: default
    chesClientSecret: default
    chesAPIURL: default
  domain: "apps.silver.devops.gov.bc.ca" # it is required, apps.silver.devops.gov.bc.ca for silver cluster
  openshiftImageRegistry: "image-registry.openshift-image-registry.svc:5000"

api:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true

  containers:
    - name: api
      registry: '{{ .Values.global.registry }}'
      repository: '{{ .Values.global.repository }}' # example, it includes registry and repository
      image: api # the exact component name, be it backend, api-1 etc...
      tag: prod # the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
      envFrom:
        secretRef:
          name: '{{ .Release.Name }}'
      ports:
        - name: http
          containerPort: 3000
          protocol: TCP
      resources: # this is optional
        limits:
          cpu: 150m
          memory: 250Mi
        requests:
          cpu: 50m
          memory: 100Mi
      readinessProbe:
        httpGet:
          path: /api/pub-code/health
          port: 3000
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 2
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 30
      livenessProbe:
        successThreshold: 1
        failureThreshold: 3
        httpGet:
          path: /api/pub-code/health
          port: 3000
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 30
        timeoutSeconds: 5

  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80 # this percentage from request cpu
  vault:
    enabled: false
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: http
        port: 80
        targetPort: 3000 # the container port where the application is listening on
        protocol: TCP
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
  route:
    enabled: true
    host: "{{ .Release.Name }}-api.{{ .Values.global.domain }}"
    targetPort: http # look at line#164 refer to the name.
  podAnnotations: |-
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

frontend:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  containers:
    - name: frontend
      registry: '{{ .Values.global.registry }}' # example, it includes registry
      repository: '{{ .Values.global.repository }}' # example, it includes repository
      image: frontend # the exact component name, be it backend, api-1 etc...
      tag: prod # the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
      securityContext:
        capabilities:
          add: [ "NET_BIND_SERVICE" ]
      env:
        fromValues:
          - name: VITE_SCHEMA_BRANCH
            value: '{{ .Values.global.env.VITE_SCHEMA_BRANCH }}'
          - name: LOG_LEVEL
            value: '{{ .Values.global.env.LOG_LEVEL }}'
      ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: http2
          containerPort: 3001
          protocol: TCP
      resources: # this is optional
        limits:
          cpu: 75m
          memory: 150Mi
        requests:
          cpu: 50m
          memory: 50Mi
      readinessProbe:
        httpGet:
          path: /health
          port: 3001
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 2
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 30
      livenessProbe:
        successThreshold: 1
        failureThreshold: 3
        httpGet:
          path: /health
          port: 3001
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 30
        timeoutSeconds: 5
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80 # this percentage from request cpu
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: http
        port: 80
        targetPort: 3000 # the container port where the application is listening on
        protocol: TCP
  route:
    enabled: true
    host: "{{ .Release.Name }}.{{ .Values.global.domain }}"
    targetPort: http # look at line#164 refer to the name.
  podAnnotations: |-
    prometheus.io/scrape: "true"
    prometheus.io/port: "3002"
    prometheus.io/path: "/metrics"

database:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  deploymentStrategy:
    type: Recreate
  volumes:
    - name: '{{ .Release.Name }}-database'
      persistentVolumeClaim:
        claimName: '{{ .Release.Name }}-database'
    - name: '{{ include "component.fullname" . }}-config'
      configMap:
        name: '{{ include "component.fullname" . }}'
  initContainers:
    - name: database-init
      registry: 'ghcr.io' # example, it includes registry
      repository: 'bcgov/nr-containers' # example, it includes repository
      image: mongo # the exact component name, be it backend, api-1 etc...
      tag: 7.0.2 # the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
      command:
        - "sh"
        - "-c"
        - "mkdir -p /data/db"
      resources: # this is optional
        limits:
          cpu: 250m
          memory: 450Mi
        requests:
          cpu: 50m
          memory: 150Mi
      volumeMounts:
        - name: '{{ .Release.Name }}-database'
          mountPath: /data/db
  containers:
    - name: database
      registry: 'ghcr.io' # example, it includes registry
      repository: 'bcgov/nr-containers' # example, it includes repository
      image: mongo # the exact component name, be it backend, api-1 etc...
      tag: 7.0.2 # the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
      envFrom:
        secretRef:
          name: '{{ .Release.Name }}'
      ports:
        - name: http
          containerPort: 27017
          protocol: TCP
      resources: # this is optional
        limits:
          cpu: 250m
          memory: 450Mi
        requests:
          cpu: 50m
          memory: 150Mi
      readinessProbe:
        tcpSocket:
          port: 27017
        initialDelaySeconds: 10
        periodSeconds: 15
        timeoutSeconds: 5
        failureThreshold: 30
      livenessProbe:
        failureThreshold: 20
        initialDelaySeconds: 60
        periodSeconds: 15
        tcpSocket:
          port: 27017
        timeoutSeconds: 5
      volumeMounts:
        - name: '{{ .Release.Name }}-database'
          mountPath: /data/db
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 1
    targetCPUUtilizationPercentage: 80 # this percentage from request cpu
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: http
        port: 27017
        targetPort: 27017 # the container port where the application is listening on
        protocol: TCP
  pvc:
    enabled: true
    size: 750Mi
    storageClassName: netapp-file-standard
    accessModes: ReadWriteMany
