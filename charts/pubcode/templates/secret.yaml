{{- if and .Values.global.secrets .Values.global.secrets.enabled}}
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace  .Release.Name ) | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
  # set below to existing secret data or generate a random one when not exists
{{- $apiKey := (get $secretData "API_KEY") | default (randAlphaNum 32 | b64enc) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}
  labels: {{- include "selectorLabels" . | nindent 4 }}
data:
  DB_HOST: {{ tpl .Values.global.secrets.databaseHost $ | b64enc | quote }}
  DB_PWD: {{ tpl .Values.global.secrets.databaseAdminPassword $ | b64enc | quote }}
  DB_USER: {{ tpl .Values.global.secrets.databaseAdminUser $ | b64enc | quote }}
  DB_NAME: {{ tpl .Values.global.secrets.databaseName $ | b64enc | quote }}
  API_KEY: {{ $apiKey | quote }}
  EMAIL_RECIPIENTS: {{ tpl .Values.global.secrets.emailRecipients $ | b64enc | quote }}
  CHES_TOKEN_URL: {{ tpl .Values.global.secrets.chesTokenURL $ | b64enc | quote }}
  CHES_CLIENT_ID: {{ tpl .Values.global.secrets.chesClientID $ | b64enc | quote }}
  CHES_CLIENT_SECRET: {{ tpl .Values.global.secrets.chesClientSecret $ | b64enc | quote }}
  CHES_API_URL: {{ tpl .Values.global.secrets.chesAPIURL $ | b64enc | quote }}
  MONGO_INITDB_ROOT_USERNAME: {{ tpl .Values.global.secrets.databaseAdminUser $ | b64enc | quote }}
  MONGO_INITDB_ROOT_PASSWORD: {{ tpl .Values.global.secrets.databaseAdminPassword $ | b64enc | quote }}
  MONGODB_DATABASE: {{ tpl .Values.global.secrets.databaseName $ | b64enc | quote }}
{{- end }}
